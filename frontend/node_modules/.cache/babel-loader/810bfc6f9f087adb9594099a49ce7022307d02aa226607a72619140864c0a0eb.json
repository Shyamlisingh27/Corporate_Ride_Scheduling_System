{"ast":null,"code":"// // Get token from localStorage\n// export function getToken() {\n//   return localStorage.getItem('token');\n// }\n\n// // Decode JWT to get user info (role, etc.)\n// export function getUserFromToken() {\n//   const token = getToken();\n//   if (!token) return null;\n//   try {\n//     const payload = JSON.parse(atob(token.split('.')[1]));\n//     return payload;\n//   } catch {\n//     return null;\n//   }\n//   // try {\n//   //   return JSON.parse(localStorage.getItem('user'));\n//   // } catch {\n//   //   return null;\n//   // }\n// }\n\n// // Check if user is admin\n// export function isAdmin() {\n//   const user = getUserFromToken();\n//   return user && user.role === 'admin';\n// }\n\n// auth.js\n\n// ✅ Get token from localStorage (used for authenticated API requests)\nexport function getToken() {\n  return localStorage.getItem('token');\n}\n\n// ✅ Get the full user object (including role) from localStorage\nexport function getUserFromTok() {\n  try {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  } catch {\n    return null;\n  }\n}\n\n// ✅ Check if user is logged in (based on token presence)\nexport function isLoggedIn() {\n  return !!getToken();\n}\n\n// ✅ Check if logged-in user is an admin\nexport function isAdmin() {\n  const user = getUser();\n  return user && user.role === 'admin';\n}\n\n// ✅ Check if logged-in user is a manager (optional, based on your schema)\nexport function isManager() {\n  const user = getUser();\n  return user && user.role === 'manager';\n}\n\n// ✅ Clear user session (logout)\nexport function logout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n}","map":{"version":3,"names":["getToken","localStorage","getItem","getUserFromTok","userStr","JSON","parse","isLoggedIn","isAdmin","user","getUser","role","isManager","logout","removeItem"],"sources":["C:/Users/Shyamli Singh/Desktop/Corporate_Ride_Scheeduling_System/frontend/src/utils/auth.js"],"sourcesContent":["// // Get token from localStorage\r\n// export function getToken() {\r\n//   return localStorage.getItem('token');\r\n// }\r\n\r\n// // Decode JWT to get user info (role, etc.)\r\n// export function getUserFromToken() {\r\n//   const token = getToken();\r\n//   if (!token) return null;\r\n//   try {\r\n//     const payload = JSON.parse(atob(token.split('.')[1]));\r\n//     return payload;\r\n//   } catch {\r\n//     return null;\r\n//   }\r\n//   // try {\r\n//   //   return JSON.parse(localStorage.getItem('user'));\r\n//   // } catch {\r\n//   //   return null;\r\n//   // }\r\n// }\r\n\r\n// // Check if user is admin\r\n// export function isAdmin() {\r\n//   const user = getUserFromToken();\r\n//   return user && user.role === 'admin';\r\n// }\r\n\r\n\r\n// auth.js\r\n\r\n// ✅ Get token from localStorage (used for authenticated API requests)\r\nexport function getToken() {\r\n  return localStorage.getItem('token');\r\n}\r\n\r\n// ✅ Get the full user object (including role) from localStorage\r\nexport function getUserFromTok() {\r\n  try {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\n// ✅ Check if user is logged in (based on token presence)\r\nexport function isLoggedIn() {\r\n  return !!getToken();\r\n}\r\n\r\n// ✅ Check if logged-in user is an admin\r\nexport function isAdmin() {\r\n  const user = getUser();\r\n  return user && user.role === 'admin';\r\n}\r\n\r\n// ✅ Check if logged-in user is a manager (optional, based on your schema)\r\nexport function isManager() {\r\n  const user = getUser();\r\n  return user && user.role === 'manager';\r\n}\r\n\r\n// ✅ Clear user session (logout)\r\nexport function logout() {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('user');\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA,OAAO,SAASA,QAAQA,CAAA,EAAG;EACzB,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACtC;;AAEA;AACA,OAAO,SAASC,cAAcA,CAAA,EAAG;EAC/B,IAAI;IACF,MAAMC,OAAO,GAAGH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC5C,OAAOE,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;EAC7C,CAAC,CAAC,MAAM;IACN,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,SAASG,UAAUA,CAAA,EAAG;EAC3B,OAAO,CAAC,CAACP,QAAQ,CAAC,CAAC;AACrB;;AAEA;AACA,OAAO,SAASQ,OAAOA,CAAA,EAAG;EACxB,MAAMC,IAAI,GAAGC,OAAO,CAAC,CAAC;EACtB,OAAOD,IAAI,IAAIA,IAAI,CAACE,IAAI,KAAK,OAAO;AACtC;;AAEA;AACA,OAAO,SAASC,SAASA,CAAA,EAAG;EAC1B,MAAMH,IAAI,GAAGC,OAAO,CAAC,CAAC;EACtB,OAAOD,IAAI,IAAIA,IAAI,CAACE,IAAI,KAAK,SAAS;AACxC;;AAEA;AACA,OAAO,SAASE,MAAMA,CAAA,EAAG;EACvBZ,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;EAChCb,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}